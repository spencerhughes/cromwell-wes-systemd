---
# tasks file for roles/configure_nginx
- name: Get public IP address
  community.general.ipify_facts:
- name: Generate common name
  ansible.builtin.set_fact:
    server_cert_common_name: "{{ ipify_public_ip }}: Self-signed certificate"
  when: (server_cert_common_name is not defined) or (server_cert_common_name|length == 0)
- name: Generate list of alt names
  ansible.builtin.set_fact:
    server_cert_alt_names:
      - "IP:{{ ipify_public_ip }}"
      - "IP:127.0.0.1"
  when: (server_cert_alt_names is not defined) or (server_cert_alt_names|length == 0)
- name: Create server private key (RSA, 4096 bits)
  become: true
  community.crypto.openssl_privatekey:
    path: "{{ server_key_path }}/{{ server_key_name }}"
    passphrase: "{{ server_key_password | default(omit) }}"
- name: Create CSR for self-signed certificate
  become: true
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ server_key_path }}/{{ server_key_name }}"
    privatekey_passphrase: "{{ server_key_password | default(omit) }}"
    common_name: "{{ server_cert_common_name }}"
    organization_name: "{{ server_org_name }}"
    subject_alt_name: "{{ server_cert_alt_names }}"
    country_name: "{{ server_country_name }}"
    state_or_province_name: "{{ server_state_or_province_name }}"
    locality_name: "{{ server_locality_name }}"
  register: server_csr
  changed_when: false
- name: Create self-signed certificate
  become: true
  community.crypto.x509_certificate:
    path: "{{ server_cert_path }}/{{ server_cert_name }}"
    privatekey_path: "{{ server_key_path }}/{{ server_key_name }}"
    privatekey_passphrase: "{{ server_key_password | default(omit) }}"
    csr_content: "{{ server_csr.csr }}"
    provider: selfsigned
    selfsigned_not_after: "+365d"
- name: Generate client private key
  local_action:
    module: community.crypto.openssl_privatekey
    path: "{{ client_key_local_path }}/{{ client_key_name }}"
    passphrase: "{{ client_key_passphrase | default(omit) }}"
- name: Create CSR for client certificate
  local_action:
    module: community.crypto.openssl_csr_pipe
    privatekey_path: "{{ client_key_local_path }}/{{ client_key_name }}"
    privatekey_passphrase: "{{ client_key_passphrase | default(omit) }}"
    common_name: "{{ client_cert_common_name }}"
    organization_name: "{{ client_org_name | default(server_org_name) }}"
    country_name: "{{ client_country_name | default(server_country_name) }}"
    state_or_province_name: "{{ client_state_or_province_name | default(server_state_or_province_name) }}"
    locality_name: "{{ client_locality_name | default(server_locality_name) }}"
  register: client_csr
  changed_when: false
- name: Create client certificate
  local_action:
    module: community.crypto.x509_certificate
    path: "{{ client_cert_local_path }}/{{ client_cert_name }}"
    privatekey_path: "{{ client_key_local_path }}/{{ client_key_name }}"
    privatekey_passphrase: "{{ client_key_passphrase | default(omit) }}"
    csr_content: "{{ client_csr.csr }}"
    provider: selfsigned
    selfsigned_not_after: "+365d"
- name: Upload client cert to server
  become: true
  ansible.builtin.copy:
    src: "{{ client_cert_local_path }}/{{ client_cert_name }}"
    dest: "{{ client_cert_path | default(server_cert_path) }}"
    owner: root
    group: root
    mode: "u=rw,go=r"
- name: Install Nginx
  become: true
  ansible.builtin.apt:
    name: nginx
    state: present
- name: Start and Enable Nginx
  become: true
  ansible.builtin.systemd:
    name: nginx
    state: started
    enabled: true
    daemon_reload: true
- name: Install WES Nginx site
  become: true
  ansible.builtin.template:
    src: wes-nginx.j2
    dest: /etc/nginx/sites-available/wes
    owner: root
    group: root
    mode: "u=rw,go=r"
  notify: Restart Nginx
- name: Enable WES Nginx site
  become: true
  ansible.builtin.file:
    src: /etc/nginx/sites-available/wes
    dest: /etc/nginx/sites-enabled/wes
    state: link
  notify: Restart Nginx
- name: Configure Nginx worker processes
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: 'worker_processes\s+.*;'
    line: "worker_processes {{ nginx_worker_processes }};"
    insertafter: BOF
    backup: true
  notify: Restart Nginx
- name: Configure Nginx worker connections
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '\s+worker_connections\s+.*;'
    line: "        worker_connections {{ nginx_worker_connections }};"
    insertafter: 'events {'
    backup: true
  notify: Restart Nginx
- name: Configure Nginx log format
  become: true
  vars:
    block: |
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
  ansible.builtin.blockinfile:
    path: /etc/nginx/nginx.conf
    block: "{{ block | indent(8,first=true) }}"
    marker: "        # {mark} Ansible-managed log format"
    insertafter: 'http {'
    backup: true
  notify: Restart Nginx
- name: Configure Nginx sendfile
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '\s+sendfile\s+.*;'
    line: '        sendfile on;'
    insertafter: 'http {'
    backup: true
  notify: Restart Nginx
- name: Configure Nginx keepalive timeout
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '\s+keepalive_timeout\s+.*;'
    line: '        keepalive_timeout 65;'
    insertafter: 'http {'
    backup: true
  notify: Restart Nginx
